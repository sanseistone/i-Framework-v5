/*

Flex布局是什么？

Flex是Flexible Box的缩写，意为”弹性布局”，用来为盒状模型提供最大的灵活性。

任何一个容器都可以指定为Flex布局。
.container{
  display: flex;
}

行内元素也可以使用Flex布局。
.container{
  display: inline-flex;
}

Webkit内核的浏览器，必须加上-webkit前缀。
.container{
  display: -webkit-flex; 
  display: flex;
}

注意，设为Flex布局以后，子元素的float、clear和vertical-align属性将失效。

*/

/*

基本概念

采用Flex布局的元素，称为Flex容器（flex container），简称”容器”。它的所有子元素自动成为容器成员，称为Flex项目（flex item），简称”项目”。

容器默认存在两根轴：水平的主轴（main axis）和垂直的交叉轴（cross axis）。
主轴的开始位置（与边框的交叉点）叫做main start，结束位置叫做main end；交叉轴的开始位置叫做cross start，结束位置叫做cross end。

项目默认沿主轴排列。单个项目占据的主轴空间叫做main size，占据的交叉轴空间叫做cross size。

*/

/*

 容器的属性:
01.flex-direction
02.flex-wrap
03.flex-flow
04.justify-content
05.align-items
06.align-content


01.flex-direction
flex-direction属性决定主轴的方向（即项目的排列方向）。

.container {
  flex-direction: row | row-reverse | column | column-reverse;
}

它可能有4个值。
row（默认值）：主轴为水平方向，起点在左端。
row-reverse：主轴为水平方向，起点在右端。
column：主轴为垂直方向，起点在上沿。
column-reverse：主轴为垂直方向，起点在下沿


02.flex-wrap
默认情况下，项目都排在一条线（又称”轴线”）上。flex-wrap属性定义，如果一条轴线排不下，如何换行。

.container{
  flex-wrap: nowrap | wrap | wrap-reverse;
}

它可能取三个值。
nowrap（默认）：不换行。
wrap：换行，第一行在上方。
wrap-reverse：换行，第一行在下方。


03.flex-flow
flex-flow属性是flex-direction属性和flex-wrap属性的简写形式，默认值为row nowrap。

.container {
  flex-flow: <flex-direction> <flex-wrap>;
}


04.justify-content
justify-content属性定义了项目在主轴上的对齐方式。

.container {
  justify-content: flex-start | flex-end | center | space-between | space-around;
}

它可能取5个值，具体对齐方式与轴的方向有关。下面假设主轴为从左到右。
flex-start（默认值）：左对齐
flex-end：右对齐
center： 居中
space-between：两端对齐，项目之间的间隔都相等。
space-around：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。


05.align-items
align-items属性定义项目在交叉轴上如何对齐。

.container {
  align-items: flex-start | flex-end | center | baseline | stretch;
}

它可能取5个值。具体的对齐方式与交叉轴的方向有关，下面假设交叉轴从上到下。
flex-start：交叉轴的起点对齐。
flex-end：交叉轴的终点对齐。
center：交叉轴的中点对齐。
baseline: 项目的第一行文字的基线对齐。
stretch（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度。


06.align-content
align-content属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。

.container {
  align-content: flex-start | flex-end | center | space-between | space-around | stretch;
}

该属性可能取6个值。
flex-start：与交叉轴的起点对齐。
flex-end：与交叉轴的终点对齐。
center：与交叉轴的中点对齐。
space-between：与交叉轴两端对齐，轴线之间的间隔平均分布。
space-around：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。
stretch（默认值）：轴线占满整个交叉轴。

*/

/*

项目的属性：
01.order
02.flex-grow
03.flex-shrink
04.flex-basis
05.flex
06.align-self


01.order
order属性定义项目的排列顺序。数值越小，排列越靠前，默认为0。

.item {
  order: <integer>;
}


02.flex-grow
flex-grow属性定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大。

.item {
  flex-grow: <number>; 
}

如果所有项目的flex-grow属性都为1，则它们将等分剩余空间（如果有的话）。如果一个项目的flex-grow属性为2，其他项目都为1，则前者占据的剩余空间将比其他项多一倍。


03.flex-shrink
flex-shrink属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。

.item {
  flex-shrink: <number>;
}

如果所有项目的flex-shrink属性都为1，当空间不足时，都将等比例缩小。如果一个项目的flex-shrink属性为0，其他项目都为1，则空间不足时，前者不缩小。
负值对该属性无效。


04.flex-basis
flex-basis属性定义了在分配多余空间之前，项目占据的主轴空间（main size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为auto，即项目的本来大小。

.item {
  flex-basis: <length> | auto;
}

它可以设为跟width或height属性一样的值（比如350px），则项目将占据固定空间。


05.flex
flex属性是flex-grow, flex-shrink 和 flex-basis的简写，默认值为0 1 auto。后两个属性可选。

.item {
  flex: none | [ <'flex-grow'> <'flex-shrink'>? || <'flex-basis'> ]
}

该属性有两个快捷值：auto (1 1 auto) 和 none (0 0 auto)。
建议优先使用这个属性，而不是单独写三个分离的属性，因为浏览器会推算相关值。


06.align-self
align-self属性允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性。默认值为auto，表示继承父元素的align-items属性，如果没有父元素，则等同于stretch。

.item {
  align-self: auto | flex-start | flex-end | center | baseline | stretch;
}

该属性可能取6个值，除了auto，其他都与align-items属性完全一致。

*/

//display

.flex {
  display: -webkit-flex;
  display: flex;
}

.inline-flex {
  display: inline-flex;
}

//flex-direction

.flex-row {
  flex-direction: row;
}

.flex-row-reverse {
  flex-direction: row-reverse;
}

.flex-col {
  flex-direction: column;
}

.flex-col-reverse {
  flex-direction: column-reverse;
}

//flex-wrap

.flex-n-wrap {
  flex-wrap: nowrap;
}

.flex-wrap {
  flex-wrap: wrap;
}

.flex-wrap-reverse {
  flex-wrap: wrap-reverse;
}

//flex-flow

.flex-flow {
  flex-flow: row nowrap;
}

//justify-content

.justify-start {
  justify-content: flex-start;
}

.justify-end {
  justify-content: flex-end;
}

.justify-center {
  justify-content: center;
}

.justify-between {
  justify-content: space-between;
}

.justify-around {
  justify-content: space-around;
}

//align-items

.items-start {
  align-items: flex-start;
}

.items-end {
  align-items: flex-end;
}

.items-center {
  align-items: center;
}

.items-baseline {
  align-items: baseline;
}

.items-stretch {
  align-items: stretch;
}

//align-content

.content-start {
  align-content: flex-start;
}

.content-end {
  align-content: flex-end;
}

.content-center {
  align-content: center;
}

.content-between {
  align-content: space-between;
}

.content-around {
  align-content: space-around;
}

.content-stretch {
  align-content: stretch;
}

//order

.#{$flex-order} {
  @each $key, $value in $flex-order-series {
    &-#{$key} {
      @include flex-order-variant($value);
    }
  }
}

//flex-grow

.flex-grow {
  flex-grow: 1;
}

.flex-n-grow {
  flex-grow: 0;
}

//flex-shrink

.flex-shrink {
  flex-shrink: 1;
}

.flex-n-shrink {
  flex-shrink: 0;
}

//flex-basis

.flex-basis {
}

//flex

.flex-initial {
  flex: initial;
}

.flex-1 {
  flex: 1;
}

.flex-auto {
  flex: auto;
}

.flex-n {
  flex: none;
}

//align-self

.self-auto {
  align-self: auto;
}

.self-start {
  align-self: flex-start;
}

.self-end {
  align-self: flex-end;
}

.self-center {
  align-self: center;
}

.self-baseline {
  align-self: baseline;
}

.self-stretch {
  align-self: stretch;
}

//responsive-pc

@media (max-width: 1199px) {
  //Extra large devices (large desktops, 992px and 1200px)
  .flex-lg {
    display: -webkit-flex;
    display: flex;
  }

  .inline-flex-lg {
    display: inline-flex;
  }

  .flex-row-lg {
    flex-direction: row;
  }

  .flex-row-reverse-lg {
    flex-direction: row-reverse;
  }

  .flex-col-lg {
    flex-direction: column;
  }

  .flex-col-reverse-lg {
    flex-direction: column-reverse;
  }

  .flex-n-wrap-lg {
    flex-wrap: nowrap;
  }

  .flex-wrap-lg {
    flex-wrap: wrap;
  }

  .flex-wrap-reverse-lg {
    flex-wrap: wrap-reverse;
  }

  .flex-flow-lg {
    flex-flow: row nowrap;
  }

  .justify-start-lg {
    justify-content: flex-start;
  }

  .justify-end-lg {
    justify-content: flex-end;
  }

  .justify-center-lg {
    justify-content: center;
  }

  .justify-between-lg {
    justify-content: space-between;
  }

  .justify-around-lg {
    justify-content: space-around;
  }

  .items-start-lg {
    align-items: flex-start;
  }

  .items-end-lg {
    align-items: flex-end;
  }

  .items-center-lg {
    align-items: center;
  }

  .items-baseline-lg {
    align-items: baseline;
  }

  .items-stretch-lg {
    align-items: stretch;
  }

  .content-start-lg {
    align-content: flex-start;
  }

  .content-end-lg {
    align-content: flex-end;
  }

  .content-center-lg {
    align-content: center;
  }

  .content-between-lg {
    align-content: space-between;
  }

  .content-around-lg {
    align-content: space-around;
  }

  .content-stretch-lg {
    align-content: stretch;
  }

  .#{$flex-order} {
    @each $key, $value in $flex-order-series {
      &-#{$key}-lg {
        @include flex-order-variant($value);
      }
    }
  }

  .flex-grow-lg {
    flex-grow: 1;
  }

  .flex-n-grow-lg {
    flex-grow: 0;
  }

  .flex-shrink-lg {
    flex-shrink: 1;
  }

  .flex-n-shrink-lg {
    flex-shrink: 0;
  }

  .flex-basis-lg {
  }

  .flex-initial-lg {
    flex: initial;
  }

  .flex-1-lg {
    flex: 1;
  }

  .flex-auto-lg {
    flex: auto;
  }

  .flex-n-lg {
    flex: none;
  }

  .self-auto-lg {
    align-self: auto;
  }

  .self-start-lg {
    align-self: flex-start;
  }

  .self-end-lg {
    align-self: flex-end;
  }

  .self-center-lg {
    align-self: center;
  }

  .self-baseline-lg {
    align-self: baseline;
  }

  .self-stretch-lg {
    align-self: stretch;
  }
}

@media (max-width: 991px) {
  //Large devices (desktops, 768px and 992px)
  .flex-md {
    display: -webkit-flex;
    display: flex;
  }

  .inline-flex-md {
    display: inline-flex;
  }

  .flex-row-md {
    flex-direction: row;
  }

  .flex-row-reverse-md {
    flex-direction: row-reverse;
  }

  .flex-col-md {
    flex-direction: column;
  }

  .flex-col-reverse-md {
    flex-direction: column-reverse;
  }

  .flex-n-wrap-md {
    flex-wrap: nowrap;
  }

  .flex-wrap-md {
    flex-wrap: wrap;
  }

  .flex-wrap-reverse-md {
    flex-wrap: wrap-reverse;
  }

  .flex-flow-md {
    flex-flow: row nowrap;
  }

  .justify-start-md {
    justify-content: flex-start;
  }

  .justify-end-md {
    justify-content: flex-end;
  }

  .justify-center-md {
    justify-content: center;
  }

  .justify-between-md {
    justify-content: space-between;
  }

  .justify-around-md {
    justify-content: space-around;
  }

  .items-start-md {
    align-items: flex-start;
  }

  .items-end-md {
    align-items: flex-end;
  }

  .items-center-md {
    align-items: center;
  }

  .items-baseline-md {
    align-items: baseline;
  }

  .items-stretch-md {
    align-items: stretch;
  }

  .content-start-md {
    align-content: flex-start;
  }

  .content-end-md {
    align-content: flex-end;
  }

  .content-center-md {
    align-content: center;
  }

  .content-between-md {
    align-content: space-between;
  }

  .content-around-md {
    align-content: space-around;
  }

  .content-stretch-md {
    align-content: stretch;
  }

  .#{$flex-order} {
    @each $key, $value in $flex-order-series {
      &-#{$key}-md {
        @include flex-order-variant($value);
      }
    }
  }

  .flex-grow-md {
    flex-grow: 1;
  }

  .flex-n-grow-md {
    flex-grow: 0;
  }

  .flex-shrink-md {
    flex-shrink: 1;
  }

  .flex-n-shrink-md {
    flex-shrink: 0;
  }

  .flex-basis-md {
  }

  .flex-initial-md {
    flex: initial;
  }

  .flex-1-md {
    flex: 1;
  }

  .flex-auto-md {
    flex: auto;
  }

  .flex-n-md {
    flex: none;
  }

  .self-auto-md {
    align-self: auto;
  }

  .self-start-md {
    align-self: flex-start;
  }

  .self-end-md {
    align-self: flex-end;
  }

  .self-center-md {
    align-self: center;
  }

  .self-baseline-md {
    align-self: baseline;
  }

  .self-stretch-md {
    align-self: stretch;
  }
}

@media (max-width: 767px) {
  //Medium devices (tablets, 576px and 768px)
  .flex-sm {
    display: -webkit-flex;
    display: flex;
  }

  .inline-flex-sm {
    display: inline-flex;
  }

  .flex-row-sm {
    flex-direction: row;
  }

  .flex-row-reverse-sm {
    flex-direction: row-reverse;
  }

  .flex-col-sm {
    flex-direction: column;
  }

  .flex-col-reverse-sm {
    flex-direction: column-reverse;
  }

  .flex-n-wrap-sm {
    flex-wrap: nowrap;
  }

  .flex-wrap-sm {
    flex-wrap: wrap;
  }

  .flex-wrap-reverse-sm {
    flex-wrap: wrap-reverse;
  }

  .flex-flow-sm {
    flex-flow: row nowrap;
  }

  .justify-start-sm {
    justify-content: flex-start;
  }

  .justify-end-sm {
    justify-content: flex-end;
  }

  .justify-center-sm {
    justify-content: center;
  }

  .justify-between-sm {
    justify-content: space-between;
  }

  .justify-around-sm {
    justify-content: space-around;
  }

  .items-start-sm {
    align-items: flex-start;
  }

  .items-end-sm {
    align-items: flex-end;
  }

  .items-center-sm {
    align-items: center;
  }

  .items-baseline-sm {
    align-items: baseline;
  }

  .items-stretch-sm {
    align-items: stretch;
  }

  .content-start-sm {
    align-content: flex-start;
  }

  .content-end-sm {
    align-content: flex-end;
  }

  .content-center-sm {
    align-content: center;
  }

  .content-between-sm {
    align-content: space-between;
  }

  .content-around-sm {
    align-content: space-around;
  }

  .content-stretch-sm {
    align-content: stretch;
  }

  .#{$flex-order} {
    @each $key, $value in $flex-order-series {
      &-#{$key}-sm {
        @include flex-order-variant($value);
      }
    }
  }

  .flex-grow-sm {
    flex-grow: 1;
  }

  .flex-n-grow-sm {
    flex-grow: 0;
  }

  .flex-shrink-sm {
    flex-shrink: 1;
  }

  .flex-n-shrink-sm {
    flex-shrink: 0;
  }

  .flex-basis-sm {
  }

  .flex-initial-sm {
    flex: initial;
  }

  .flex-1-sm {
    flex: 1;
  }

  .flex-auto-sm {
    flex: auto;
  }

  .flex-n-sm {
    flex: none;
  }

  .self-auto-sm {
    align-self: auto;
  }

  .self-start-sm {
    align-self: flex-start;
  }

  .self-end-sm {
    align-self: flex-end;
  }

  .self-center-sm {
    align-self: center;
  }

  .self-baseline-sm {
    align-self: baseline;
  }

  .self-stretch-sm {
    align-self: stretch;
  }
}

@media (max-width: 575px) {
  //Small devices (landscape phones, max-width 576px)
  .flex-xs {
    display: -webkit-flex;
    display: flex;
  }

  .inline-flex-xs {
    display: inline-flex;
  }

  .flex-row-xs {
    flex-direction: row;
  }

  .flex-row-reverse-xs {
    flex-direction: row-reverse;
  }

  .flex-col-xs {
    flex-direction: column;
  }

  .flex-col-reverse-xs {
    flex-direction: column-reverse;
  }

  .flex-n-wrap-xs {
    flex-wrap: nowrap;
  }

  .flex-wrap-xs {
    flex-wrap: wrap;
  }

  .flex-wrap-reverse-xs {
    flex-wrap: wrap-reverse;
  }

  .flex-flow-xs {
    flex-flow: row nowrap;
  }

  .justify-start-xs {
    justify-content: flex-start;
  }

  .justify-end-xs {
    justify-content: flex-end;
  }

  .justify-center-xs {
    justify-content: center;
  }

  .justify-between-xs {
    justify-content: space-between;
  }

  .justify-around-xs {
    justify-content: space-around;
  }

  .items-start-xs {
    align-items: flex-start;
  }

  .items-end-xs {
    align-items: flex-end;
  }

  .items-center-xs {
    align-items: center;
  }

  .items-baseline-xs {
    align-items: baseline;
  }

  .items-stretch-xs {
    align-items: stretch;
  }

  .content-start-xs {
    align-content: flex-start;
  }

  .content-end-xs {
    align-content: flex-end;
  }

  .content-center-xs {
    align-content: center;
  }

  .content-between-xs {
    align-content: space-between;
  }

  .content-around-xs {
    align-content: space-around;
  }

  .content-stretch-xs {
    align-content: stretch;
  }

  .#{$flex-order} {
    @each $key, $value in $flex-order-series {
      &-#{$key}-xs {
        @include flex-order-variant($value);
      }
    }
  }

  .flex-grow-xs {
    flex-grow: 1;
  }

  .flex-n-grow-xs {
    flex-grow: 0;
  }

  .flex-shrink-xs {
    flex-shrink: 1;
  }

  .flex-n-shrink-xs {
    flex-shrink: 0;
  }

  .flex-basis-xs {
  }

  .flex-initial-xs {
    flex: initial;
  }

  .flex-1-xs {
    flex: 1;
  }

  .flex-auto-xs {
    flex: auto;
  }

  .flex-n-xs {
    flex: none;
  }

  .self-auto-xs {
    align-self: auto;
  }

  .self-start-xs {
    align-self: flex-start;
  }

  .self-end-xs {
    align-self: flex-end;
  }

  .self-center-xs {
    align-self: center;
  }

  .self-baseline-xs {
    align-self: baseline;
  }

  .self-stretch-xs {
    align-self: stretch;
  }
}

//responsive-mobile

//Extra small devices (portrait phones, less than 576px)
//No media query for `xs` since this is the default

@media (min-width: 576px) {
  //Small devices (landscape phones, 576px and up)
}

@media (min-width: 768px) {
  //Medium devices (tablets, 768px and up)
}

@media (min-width: 992px) {
  //Large devices (desktops, 992px and up)
}

@media (min-width: 1200px) {
  //Extra large devices (large desktops, 1200px and up)
}